"use strict";(self.webpackChunkwasmbox_docs=self.webpackChunkwasmbox_docs||[]).push([[8816],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>k});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),d=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,k=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return a?t.createElement(k,o(o({ref:n},p),{},{components:a})):t.createElement(k,o({ref:n},p))}));function k(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1347:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=a(7462),r=(a(7294),a(3905));const i={title:"Custom WASM Instantiation",sidebar_position:3},o=void 0,s={unversionedId:"advanced/manual_loading",id:"advanced/manual_loading",title:"Custom WASM Instantiation",description:"Wasmbox provides behaviours to automatically load a WASM asset into a state that allows code to be run. However, it is possible to do this process directly in your own code to take complete control over the entire process.",source:"@site/docs/advanced/manual_loading.md",sourceDirName:"advanced",slug:"/advanced/manual_loading",permalink:"/wasmbox/advanced/manual_loading",draft:!1,editUrl:"https://github.com/Placeholder-Software/Wasmbox/tree/master/docs/advanced/manual_loading.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Custom WASM Instantiation",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Runtime WASM Loading",permalink:"/wasmbox/advanced/runtime_wasm_loading"},next:{title:"Async WASM",permalink:"/wasmbox/advanced/asyncify"}},l={},d=[{value:"Step By Step",id:"step-by-step",level:2},{value:"Required Resources",id:"required-resources",level:3},{value:"Loading",id:"loading",level:3},{value:"Configuring",id:"configuring",level:3},{value:"Instantiating",id:"instantiating",level:3},{value:"Complete Example",id:"complete-example",level:3},{value:"Potential Extensions",id:"potential-extensions",level:2},{value:"Addressable Loading",id:"addressable-loading",level:3},{value:"Linker Re-Use",id:"linker-re-use",level:3},{value:"Store Re-Use",id:"store-re-use",level:3},{value:"Wrapper Code",id:"wrapper-code",level:3},{value:"Unity Job System",id:"unity-job-system",level:3}],p={toc:d};function m(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Wasmbox provides ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/simplewasmmonobehaviour"},"behaviours")," to automatically load a WASM asset into a state that allows code to be run. However, it is possible to do this process directly in your own code to take complete control over the entire process."),(0,r.kt)("admonition",{title:"Addressables",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"Addressable Loading")," refer to the ",(0,r.kt)("a",{parentName:"p",href:"#addressable-loading"},"Addressable Loading")," section.")),(0,r.kt)("admonition",{title:"Glossary",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/glossary"},"glossary")," for an overview of all the components involved.")),(0,r.kt)("h2",{id:"step-by-step"},"Step By Step"),(0,r.kt)("h3",{id:"required-resources"},"Required Resources"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IWasmAsset Asset;\nEngineConfig Config;\n")),(0,r.kt)("p",null,"Before loading any WASM an ",(0,r.kt)("inlineCode",{parentName:"p"},"IWasmAsset")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"EngineConfig")," are required."),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"IWasmAsset")," represents a source that WASM can be loaded from. This may be a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmasset"},(0,r.kt)("inlineCode",{parentName:"a"},"WasmAsset"))," (imported in editor) a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/dynamicwasmasset"},(0,r.kt)("inlineCode",{parentName:"a"},"DynamicWasmAsset"))," (loaded at runtime from a file) or a custom ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/iwasmasset"},(0,r.kt)("inlineCode",{parentName:"a"},"IWasmAsset"))," implementation."),(0,r.kt)("p",null,"An ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/engineconfig"},(0,r.kt)("inlineCode",{parentName:"a"},"EngineConfig"))," configures how the WASM loaded from the asset should be compiled into executable code. Compile time features such as ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/basics/limiting_execution/fuelusage"},"Fuel Usage")," can be enabled."),(0,r.kt)("h3",{id:"loading"},"Loading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var module = Asset.Load(Config);\nif (module == null)\n    throw new Exception("Loading Failed");\n')),(0,r.kt)("p",null,"Loading the asset with an ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/engineconfig"},(0,r.kt)("inlineCode",{parentName:"a"},"EngineConfig"))," creates a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/loadedmodule"},(0,r.kt)("inlineCode",{parentName:"a"},"LoadedModule"))," which contains the compiled executable machine code in memory. If loading fails for some reason a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," object will be returned."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Compiling a WASM Module is potentially a slow process if the asset is large and has not been ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/editor/import#5-compilation"},"precompiled"),".")),(0,r.kt)("h3",{id:"configuring"},"Configuring"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var store = Config.CreateStore();\n\nvar linker = Config.CreateLinker();\nlinker.DefineFunction("demo", "add", (int a, int b) => a + b);\nlinker.DefineFunction("demo", "sub", (int a, int b) => a - b);\n')),(0,r.kt)("p",null,"To create an ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/instance"},(0,r.kt)("inlineCode",{parentName:"a"},"Instance"))," from a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/module"},"module")," requires a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/store"},(0,r.kt)("inlineCode",{parentName:"a"},"Store"))," and a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,r.kt)("inlineCode",{parentName:"a"},"Linker")),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,r.kt)("inlineCode",{parentName:"a"},"Linker"))," can be used to expose C# functions to WASM. See the ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/basics/linker"},"tutorial on linking")," for more information."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/store"},(0,r.kt)("inlineCode",{parentName:"a"},"Store"))," contains all the ",(0,r.kt)("em",{parentName:"p"},"state")," of the executed WASM code. Multiple ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/instance"},(0,r.kt)("inlineCode",{parentName:"a"},"Instances"))," can share a ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/store"},(0,r.kt)("inlineCode",{parentName:"a"},"Store")),"."),(0,r.kt)("h3",{id:"instantiating"},"Instantiating"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var instance = module.CreateInstance(linker, store);\n\nvar add = instance.GetFunction<int, int, int>("add");\nvar result = add(1, 2);\n')),(0,r.kt)("p",null,"Finally an ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/instance"},(0,r.kt)("inlineCode",{parentName:"a"},"Instance"))," can be created using the ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/module"},"module"),", ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/store"},(0,r.kt)("inlineCode",{parentName:"a"},"Store"))," and ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,r.kt)("inlineCode",{parentName:"a"},"Linker")),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/function"},(0,r.kt)("inlineCode",{parentName:"a"},"Functions")),", ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/memory"},(0,r.kt)("inlineCode",{parentName:"a"},"Memories")),", ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/table"},(0,r.kt)("inlineCode",{parentName:"a"},"Tables"))," and ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/global"},(0,r.kt)("inlineCode",{parentName:"a"},"Globals"))," can be retrieved from the ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/instance"},(0,r.kt)("inlineCode",{parentName:"a"},"Instance"))," and used later."),(0,r.kt)("h3",{id:"complete-example"},"Complete Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class DemoWasmLoading\n    : MonoBehaviour\n{\n    private WasmAsset Asset;\n    private EngineConfig Config;\n\n    void OnEnable()\n    {\n        using var module = Asset.Load(Config);\n        if (module == null)\n            throw new Exception("Loading Failed");\n\n        using var store = Config.CreateStore();\n        using var linker = Config.CreateLinker();\n        linker.DefineFunction("demo", "add", (int a, int b) => a + b);\n        linker.DefineFunction("demo", "sub", (int a, int b) => a - b);\n\n        var instance = module.CreateInstance(linker, store);\n        var add = instance.GetFunction<int, int, int>("add");\n\n        var result = add(1, 2);\n        Debug.Log(result);\n    }\n}\n')),(0,r.kt)("h2",{id:"potential-extensions"},"Potential Extensions"),(0,r.kt)("p",null,"Now that you have complete control over the process of loading and instantiating WASM there are several interesting things you can do:"),(0,r.kt)("h3",{id:"addressable-loading"},"Addressable Loading"),(0,r.kt)("p",null,'If "Addressable Loading" is enabled in the ',(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/editor/import#7-code-generation"},"importer")," then most of these steps can be skipped by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateAsync")," method on the auto generated wrapper code. In particular no direct reference to the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmAsset")," is ever required, it is automatically acquired through the addressable asset system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class DemoAddressableLoading\n{\n    private EngineConfig Config;\n\n    async Task<TheAutogeneratedWrapper> DemoAsync()\n    {\n        using var linker = Config.CreateLinker();\n        linker.DefineFunction("demo", "mul", (int a, int b) => a * b);\n        linker.DefineFunction("demo", "div", (int a, int b) => a / b);\n\n        using var wrapper = TheAutogeneratedWrapper.LoadAsync(linker);\n\n        var result = wrapper.Add(1, 2); // Assuming the WASM defines a method called `Add`\n        Debug.Log(result);\n    }\n}\n')),(0,r.kt)("p",null,"If you still wish to pass in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Linker")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," that is possible, but not required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var store = Config.CreateStore();\n\nusing var linker = Config.CreateLinker();\nlinker.DefineFunction("demo", "add", (int a, int b) => a + b);\nlinker.DefineFunction("demo", "sub", (int a, int b) => a - b);\n\nvar wrapper = await TheAutogeneratedWrapper.CreateAsync(Config, linker, store);\n')),(0,r.kt)("h3",{id:"linker-re-use"},"Linker Re-Use"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Linker")," in the above example is created, used once and then disposed. However, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Linker")," can be re-used as long as the ",(0,r.kt)("inlineCode",{parentName:"p"},"EngineConfig")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Linker")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Module")," are the same."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'LoadedModule module;\nLinker linker;\n\nvoid OnEnable()\n{\n    module = Asset.Load(Config);\n    if (module == null)\n        throw new Exception("Loading Failed");\n    \n    // Do the linker setup just once\n    linker = module.CreateLinker();\n    linker.DefineFunction("demo", "add", (int a, int b) => a + b);\n    linker.DefineFunction("demo", "sub", (int a, int b) => a - b);\n}\n\nvoid Update()\n{\n    // Create and use lots of instances using this linker\n    using var store = module.CreateStore();\n    var instance = module.CreateInstance(linker, store);\n    var add = instance.GetFunction<int, int, int>("add");\n    var result = add(1, 2);\n    Debug.Log(result);\n}\n\nvoid OnDisable()\n{\n    module?.Dispose();\n    module = null;\n\n    linker?.Dispose();\n    linker = null;\n}\n')),(0,r.kt)("h3",{id:"store-re-use"},"Store Re-Use"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," can also be shared between multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"Instances"),". However be cautious - the ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," never ",(0,r.kt)("em",{parentName:"p"},"deallocates")," any resources (until it is disposed). This means that any resources created within the ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," (e.g. a ",(0,r.kt)("inlineCode",{parentName:"p"},"Memory")," object) by any ",(0,r.kt)("inlineCode",{parentName:"p"},"Instance")," will not be destroyed until the ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," is destroyed."),(0,r.kt)("h3",{id:"wrapper-code"},"Wrapper Code"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/codegeneration"},"autogenerated wrapper code")," can be used to make calling WASM code simpler."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using var t = new TheAutogeneratedWrapper(instance, store, disposeStore: true);\nvar result = t.add(1, 2);\n")),(0,r.kt)("p",null,"The final argument (",(0,r.kt)("inlineCode",{parentName:"p"},"disposeStore"),") indicates if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," should be disposed when the wrapper is disposed."),(0,r.kt)("h3",{id:"unity-job-system"},"Unity Job System"),(0,r.kt)("p",null,"The wrapper code is designed such that it can be passed into a Unity Job, internally this is passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"Instance")," into the Job so that they can be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var wrapper = new TheAutogeneratedWrapper(instance, store, disposeStore: true);\nvar handle = new DemoJob(wrapper).Schedule();\nhandle.Complete();\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"wrapper")," provides the integration with the Unity safety system, improper usage can easily bypass safety and cause hard to debug multithreading errors.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Do Not"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create multiple wrappers around the same ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance"),"."),(0,r.kt)("li",{parentName:"ul"},"Share a ",(0,r.kt)("inlineCode",{parentName:"li"},"Store")," between multiple wrappers which are scheduled."),(0,r.kt)("li",{parentName:"ul"},"Access the ",(0,r.kt)("inlineCode",{parentName:"li"},"Store")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance")," in any way while the wrapper is in use in a job.")))}m.isMDXComponent=!0}}]);