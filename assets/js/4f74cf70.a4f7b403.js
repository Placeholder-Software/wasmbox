"use strict";(self.webpackChunkwasmbox_docs=self.webpackChunkwasmbox_docs||[]).push([[6459],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>h});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(i),m=n,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return i?r.createElement(h,l(l({ref:t},c),{},{components:i})):r.createElement(h,l({ref:t},c))}));function h(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,l[1]=o;for(var d=2;d<a;d++)l[d]=i[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}m.displayName="MDXCreateElement"},1534:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=i(7462),n=(i(7294),i(3905));const a={title:"Virtual File System"},l=void 0,o={unversionedId:"basics/wasi/virtual_file_system",id:"basics/wasi/virtual_file_system",title:"Virtual File System",description:'Certain WASI methods provide access to a POSIX-like filesystem API, which allows WASM code to read/write files and folders. Wasmbox provides a complete in-memory file system which can have "real" files and folders mapped into it, giving very fine grained control over WASM access to the file system.',source:"@site/docs/basics/wasi/virtual_file_system.md",sourceDirName:"basics/wasi",slug:"/basics/wasi/virtual_file_system",permalink:"/wasmbox/basics/wasi/virtual_file_system",draft:!1,editUrl:"https://github.com/Placeholder-Software/Wasmbox/tree/master/docs/basics/wasi/virtual_file_system.md",tags:[],version:"current",frontMatter:{title:"Virtual File System"},sidebar:"tutorialSidebar",previous:{title:"WASI",permalink:"/wasmbox/basics/wasi/"},next:{title:"Limiting Execution Time",permalink:"/wasmbox/basics/limiting_execution/"}},s={},d=[{value:"Unsupported Features",id:"unsupported-features",level:2},{value:"Symbolic Links",id:"symbolic-links",level:4},{value:"File Descriptor Rights",id:"file-descriptor-rights",level:4},{value:"Creating A Virtual File System",id:"creating-a-virtual-file-system",level:2},{value:"Builder Methods",id:"builder-methods",level:2},{value:"VirtualFileSystemBuilder",id:"virtualfilesystembuilder",level:3},{value:"<code>Build</code>",id:"build",level:4},{value:"<code>WithVirtualRoot(Action&lt;DirectoryBuilder&gt;)</code>",id:"withvirtualrootactiondirectorybuilder",level:4},{value:"<code>WithPipes</code>",id:"withpipes",level:4},{value:"<code>WithClock</code>",id:"withclock",level:4},{value:"<code>Readonly</code>",id:"readonly",level:4},{value:"DirectoryBuilder",id:"directorybuilder",level:3},{value:"<code>CreateVirtualDirectory(string name, Action&lt;DirectoryBuilder&gt; content)</code>",id:"createvirtualdirectorystring-name-actiondirectorybuilder-content",level:4},{value:"<code>CreateInMemoryFile(string name, ReadOnlyMemory&lt;byte&gt;? content = null, bool isReadOnly = false)</code>",id:"createinmemoryfilestring-name-readonlymemorybyte-content--null-bool-isreadonly--false",level:4},{value:"<code>MapFile(string name, string hostPath)</code>",id:"mapfilestring-name-string-hostpath",level:4},{value:"<code>MapDirectory(string name, string hostPath, Action&lt;DirectoryBuilder&gt; content)</code>",id:"mapdirectorystring-name-string-hostpath-actiondirectorybuilder-content",level:4},{value:"<code>MapReadonlyZipArchiveDirectory(string name, string hostPath)</code>",id:"mapreadonlyziparchivedirectorystring-name-string-hostpath",level:3}],c={toc:d};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,'Certain WASI methods provide access to a POSIX-like filesystem API, which allows WASM code to read/write files and folders. Wasmbox provides a complete in-memory file system which can have "real" files and folders mapped into it, giving very fine grained control over WASM access to the file system.'),(0,n.kt)("h2",{id:"unsupported-features"},"Unsupported Features"),(0,n.kt)("p",null,"The built in implementation does ",(0,n.kt)("strong",{parentName:"p"},"not")," currently support all features of the WASI FS specification. If you need any of the unsupported features please ",(0,n.kt)("a",{parentName:"p",href:"http://localhost:3000/wasmbox/getting_started/support/"},"contacts us"),"."),(0,n.kt)("h4",{id:"symbolic-links"},"Symbolic Links"),(0,n.kt)("p",null,"Symbolic Links are not yet implemented in the Wasmbox VFS."),(0,n.kt)("h4",{id:"file-descriptor-rights"},"File Descriptor Rights"),(0,n.kt)("p",null,"File Descriptor Rights are due to be removed in future versions of the WASI spec (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/wasi-filesystem/issues/31"},"wasi-filesystem#31"),"). They are not implemented in the Wasmbox VFS."),(0,n.kt)("h2",{id:"creating-a-virtual-file-system"},"Creating A Virtual File System"),(0,n.kt)("p",null,"A VFS instance can be created with a ",(0,n.kt)("inlineCode",{parentName:"p"},"VirtualFileSystemBuilder"),". This builder allows you to easily define a complete file system hierarchy and then to add the result to the ",(0,n.kt)("a",{parentName:"p",href:"/wasmbox/basics/linker"},(0,n.kt)("inlineCode",{parentName:"a"},"Linker")),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'void CreateRoot(DirectoryBuilder root)\n{\n    root.CreateVirtualDirectory("A");\n\n    root.CreateVirtualDirectory("B", dir => {\n        dir.CreateInMemoryFile("File.txt");\n        dir.MapFile("virtual.txt", "real.txt")\n    });\n}\n\nvar builder = new VirtualFileSystemBuilder()\n    .WithVirtualRoot(CreateRoot)\n    .Readonly(false);\n\nlinker.Define(builder.Build());\n')),(0,n.kt)("p",null,"This example creates a file system like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 A\n\u2514\u2500\u2500 B\n    \u251c\u2500\u2500 File.txt\n    \u2514\u2500\u2500 virtual.txt\n")),(0,n.kt)("h2",{id:"builder-methods"},"Builder Methods"),(0,n.kt)("h3",{id:"virtualfilesystembuilder"},"VirtualFileSystemBuilder"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"VirtualFileSystemBuilder")," is an easy way to construct an entire virtual file system. Method calls can be chained together."),(0,n.kt)("h4",{id:"build"},(0,n.kt)("inlineCode",{parentName:"h4"},"Build")),(0,n.kt)("p",null,"Builds the ",(0,n.kt)("inlineCode",{parentName:"p"},"VirtualFileSystem")," object which can be passed into the ",(0,n.kt)("inlineCode",{parentName:"p"},"Linker"),". The builder cannot be used after this point, any other calls will throw an ",(0,n.kt)("inlineCode",{parentName:"p"},"InvalidOperationException"),"."),(0,n.kt)("h4",{id:"withvirtualrootactiondirectorybuilder"},(0,n.kt)("inlineCode",{parentName:"h4"},"WithVirtualRoot(Action<DirectoryBuilder>)")),(0,n.kt)("p",null,'Set the "root" of the file system. Later calls to this method will overwrite earlier calls.'),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Action")," passed in as a parameter will be called when ",(0,n.kt)("inlineCode",{parentName:"p"},"Build")," is finally called. It is given a ",(0,n.kt)("inlineCode",{parentName:"p"},"DirctoryBuilder")," which represents the root directory."),(0,n.kt)("h4",{id:"withpipes"},(0,n.kt)("inlineCode",{parentName:"h4"},"WithPipes")),(0,n.kt)("p",null,'Configure the "pipes" to use for standard in, standard out and standard error. Each item can be set to null, which will set them to the default (an infinitely large file, full of zero bytes).'),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"UnityLog")," file type can be used to redirect the output streams to the Unity log file:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.WithPipes(null, new UnityLog("STDOUT"), new UnityLog("STDERR", error: true));\n'))),(0,n.kt)("h4",{id:"withclock"},(0,n.kt)("inlineCode",{parentName:"h4"},"WithClock")),(0,n.kt)("p",null,"Set the clock which will be used by the file system for all time based operations (e.g. setting access time). Any WASI ",(0,n.kt)("inlineCode",{parentName:"p"},"IVirtualClock")," implementation can be used as the clock."),(0,n.kt)("h4",{id:"readonly"},(0,n.kt)("inlineCode",{parentName:"h4"},"Readonly")),(0,n.kt)("p",null,"Set the ",(0,n.kt)("strong",{parentName:"p"},"entire filesystem")," as read only."),(0,n.kt)("h3",{id:"directorybuilder"},"DirectoryBuilder"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"DirectoryBuilder")," is an easy way to construct a directory, containing files and other directories."),(0,n.kt)("h4",{id:"createvirtualdirectorystring-name-actiondirectorybuilder-content"},(0,n.kt)("inlineCode",{parentName:"h4"},"CreateVirtualDirectory(string name, Action<DirectoryBuilder> content)")),(0,n.kt)("p",null,"Create a new child directory with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),". Optionally the ",(0,n.kt)("inlineCode",{parentName:"p"},"content")," callback defines the contents of the new directory."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.CreateVirtualDirectory("ChildDirectoryName", child => {\n    child.CreateInMemoryFile("File.txt");\n});\n\nbuilder.CreateVirtualDirectory("Empty_ChildDirectoryName");\n')),(0,n.kt)("h4",{id:"createinmemoryfilestring-name-readonlymemorybyte-content--null-bool-isreadonly--false"},(0,n.kt)("inlineCode",{parentName:"h4"},"CreateInMemoryFile(string name, ReadOnlyMemory<byte>? content = null, bool isReadOnly = false)")),(0,n.kt)("p",null,"Create a new virtual (in memory) file in this directory with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),". Optionally ",(0,n.kt)("inlineCode",{parentName:"p"},"content")," sets the initial content of the file. Optionally ",(0,n.kt)("inlineCode",{parentName:"p"},"isReadonly")," sets the file as read-only."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'builder\n    .CreateInMemoryFile("File1")\n    .CreateInMemoryFile("File2", Encoding.UTF8.GetBytes("Hello World"))\n    .CreateInMemoryFile("File3", isReadonly: true);\n')),(0,n.kt)("h4",{id:"mapfilestring-name-string-hostpath"},(0,n.kt)("inlineCode",{parentName:"h4"},"MapFile(string name, string hostPath)")),(0,n.kt)("p",null,"Create a new file in the virtual file system which is a real file on disk. All read/write operations will be passed through to the actual file."),(0,n.kt)("admonition",{type:"danger"},(0,n.kt)("p",{parentName:"admonition"},"WASM code can read and write this file!")),(0,n.kt)("h4",{id:"mapdirectorystring-name-string-hostpath-actiondirectorybuilder-content"},(0,n.kt)("inlineCode",{parentName:"h4"},"MapDirectory(string name, string hostPath, Action<DirectoryBuilder> content)")),(0,n.kt)("p",null,"Create a new directory in the virtual file system which is a real directory on disk. All read/write operations will be passed through to the actual file."),(0,n.kt)("admonition",{type:"danger"},(0,n.kt)("p",{parentName:"admonition"},"WASM code can read and write this directory and all child files!")),(0,n.kt)("h3",{id:"mapreadonlyziparchivedirectorystring-name-string-hostpath"},(0,n.kt)("inlineCode",{parentName:"h3"},"MapReadonlyZipArchiveDirectory(string name, string hostPath)")),(0,n.kt)("p",null,"Create a new child directory with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),". The contents are read from the zip archive located at ",(0,n.kt)("inlineCode",{parentName:"p"},"hostPath"),"."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"The mounted zip archive is read-only and ",(0,n.kt)("strong",{parentName:"p"},"must not")," be modified while mounted.")))}p.isMDXComponent=!0}}]);