"use strict";(self.webpackChunkwasmbox_docs=self.webpackChunkwasmbox_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Wasmbox","href":"/wasmbox/","docId":"index"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What Is WebAssembly?","href":"/wasmbox/getting_started/wasmintro","docId":"getting_started/wasmintro"},{"type":"link","label":"Platform Support","href":"/wasmbox/getting_started/platforms","docId":"getting_started/platforms"},{"type":"link","label":"Installation","href":"/wasmbox/getting_started/installation","docId":"getting_started/installation"},{"type":"category","label":"Example Scenes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basic MonoBehaviour","href":"/wasmbox/getting_started/demos/BasicMonoBehaviour","docId":"getting_started/demos/BasicMonoBehaviour"}],"href":"/wasmbox/getting_started/demos/"},{"type":"link","label":"Help & Support","href":"/wasmbox/getting_started/support","docId":"getting_started/support"}],"href":"/wasmbox/getting_started/"},{"type":"category","label":"Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using WASM In Scripts","href":"/wasmbox/basics/using_wasm","docId":"basics/using_wasm"},{"type":"link","label":"Addressable Loading","href":"/wasmbox/basics/addressables","docId":"basics/addressables"},{"type":"link","label":"Calling C# Code From WASM","href":"/wasmbox/basics/linker","docId":"basics/linker"},{"type":"category","label":"WASI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Virtual File System","href":"/wasmbox/basics/wasi/virtual_file_system","docId":"basics/wasi/virtual_file_system"}],"href":"/wasmbox/basics/wasi/"},{"type":"category","label":"Limiting Execution Time","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Fuel Usage","href":"/wasmbox/basics/limiting_execution/fuelusage","docId":"basics/limiting_execution/fuelusage"},{"type":"link","label":"Epoch Interruption","href":"/wasmbox/basics/limiting_execution/epochinterruption","docId":"basics/limiting_execution/epochinterruption"}],"href":"/wasmbox/basics/limiting_execution/"},{"type":"link","label":"WASM In Jobs","href":"/wasmbox/basics/jobs","docId":"basics/jobs"},{"type":"category","label":"Compiling To WASM","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AssemblyScript","href":"/wasmbox/basics/languages/assemblyscript","docId":"basics/languages/assemblyscript"},{"type":"link","label":"C/C++","href":"/wasmbox/basics/languages/cplusplus","docId":"basics/languages/cplusplus"},{"type":"link","label":"Python","href":"/wasmbox/basics/languages/python","docId":"basics/languages/python"},{"type":"link","label":"Rust","href":"/wasmbox/basics/languages/rust","docId":"basics/languages/rust"},{"type":"link","label":"Web Assembly Text","href":"/wasmbox/basics/languages/wat","docId":"basics/languages/wat"}],"href":"/wasmbox/basics/languages/"}],"href":"/wasmbox/basics/"},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Determinism","href":"/wasmbox/advanced/determinism","docId":"advanced/determinism"},{"type":"link","label":"Runtime WASM Loading","href":"/wasmbox/advanced/runtime_wasm_loading","docId":"advanced/runtime_wasm_loading"},{"type":"link","label":"Custom WASM Instantiation","href":"/wasmbox/advanced/manual_loading","docId":"advanced/manual_loading"}],"href":"/wasmbox/advanced/"},{"type":"category","label":"Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Engines, Modules, Stores & Instances \ud83d\ude35","href":"/wasmbox/reference/glossary","docId":"reference/glossary"},{"type":"category","label":"Code","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WASM Asset","href":"/wasmbox/reference/code/wasmasset","docId":"reference/code/wasmasset"},{"type":"link","label":"IWasmAsset","href":"/wasmbox/reference/code/iwasmasset","docId":"reference/code/iwasmasset"},{"type":"link","label":"Dynamic WASM Asset","href":"/wasmbox/reference/code/dynamicwasmasset","docId":"reference/code/dynamicwasmasset"},{"type":"link","label":"Engine Config","href":"/wasmbox/reference/code/engineconfig","docId":"reference/code/engineconfig"},{"type":"link","label":"Loaded Module","href":"/wasmbox/reference/code/loadedmodule","docId":"reference/code/loadedmodule"},{"type":"link","label":"Generated Code","href":"/wasmbox/reference/code/codegeneration","docId":"reference/code/codegeneration"},{"type":"category","label":"WASI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Clock","href":"/wasmbox/reference/code/WASI/clock","docId":"reference/code/WASI/clock"},{"type":"link","label":"Environment","href":"/wasmbox/reference/code/WASI/environment","docId":"reference/code/WASI/environment"},{"type":"link","label":"Virtual Filesystem","href":"/wasmbox/reference/code/WASI/filesystem","docId":"reference/code/WASI/filesystem"},{"type":"link","label":"Process","href":"/wasmbox/reference/code/WASI/process","docId":"reference/code/WASI/process"},{"type":"link","label":"Random","href":"/wasmbox/reference/code/WASI/random","docId":"reference/code/WASI/random"}],"href":"/wasmbox/category/wasi"},{"type":"link","label":"SimpleWasmMonoBehaviour","href":"/wasmbox/reference/code/simplewasmmonobehaviour","docId":"reference/code/simplewasmmonobehaviour"},{"type":"category","label":"Wasmtime","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Wasmtime Introduction","href":"/wasmbox/reference/code/wasmtime/Introduction","docId":"reference/code/wasmtime/Introduction"},{"type":"link","label":"Engine","href":"/wasmbox/reference/code/wasmtime/engine","docId":"reference/code/wasmtime/engine"},{"type":"link","label":"Function","href":"/wasmbox/reference/code/wasmtime/function","docId":"reference/code/wasmtime/function"},{"type":"link","label":"Global","href":"/wasmbox/reference/code/wasmtime/global","docId":"reference/code/wasmtime/global"},{"type":"link","label":"Instance","href":"/wasmbox/reference/code/wasmtime/instance","docId":"reference/code/wasmtime/instance"},{"type":"link","label":"Linker","href":"/wasmbox/reference/code/wasmtime/linker","docId":"reference/code/wasmtime/linker"},{"type":"link","label":"Memory","href":"/wasmbox/reference/code/wasmtime/memory","docId":"reference/code/wasmtime/memory"},{"type":"link","label":"Module","href":"/wasmbox/reference/code/wasmtime/module","docId":"reference/code/wasmtime/module"},{"type":"link","label":"Store","href":"/wasmbox/reference/code/wasmtime/store","docId":"reference/code/wasmtime/store"},{"type":"link","label":"Table","href":"/wasmbox/reference/code/wasmtime/table","docId":"reference/code/wasmtime/table"},{"type":"link","label":"ValueKind","href":"/wasmbox/reference/code/wasmtime/valuekind","docId":"reference/code/wasmtime/valuekind"}],"href":"/wasmbox/category/wasmtime"}],"href":"/wasmbox/category/code"},{"type":"category","label":"Editor","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Importing WebAssembly","href":"/wasmbox/reference/editor/import","docId":"reference/editor/import"},{"type":"link","label":"WASM Asset","href":"/wasmbox/reference/editor/wasmasset","docId":"reference/editor/wasmasset"}],"href":"/wasmbox/category/editor"}],"href":"/wasmbox/reference/"}]},"docs":{"advanced/determinism":{"id":"advanced/determinism","title":"Determinism","description":"WebAssembly (WASM) is deterministic in that it guarantees that the execution of a given module with the same input values will always produce the same output values, regardless of the platform or implementation used to run the module. This means that the execution of a WebAssembly module is predictable and reproducible.","sidebar":"tutorialSidebar"},"advanced/index":{"id":"advanced/index","title":"Advanced","description":"Documentation for advanced use cases.","sidebar":"tutorialSidebar"},"advanced/manual_loading":{"id":"advanced/manual_loading","title":"Custom WASM Instantiation","description":"Wasmbox provides behaviours to automatically load a WASM asset into a state that allows code to be run. However, it is possible to do this process directly in your own code to take complete control over the entire process.","sidebar":"tutorialSidebar"},"advanced/runtime_wasm_loading":{"id":"advanced/runtime_wasm_loading","title":"Runtime WASM Loading","description":"The basic use of Wasmbox has a WASM/WAT file imported in the editor, to produce a WasmAsset which can be loaded at runtime. However sometimes it is necessary to load a WASM file at runtime, for example loading mods from a folder. This can be done with the DynamicWasmAsset or a custom IWasmAsset.","sidebar":"tutorialSidebar"},"basics/addressables":{"id":"basics/addressables","title":"Addressable Loading","description":"Using Addressable Loading requires the Unity Addressable Asset System.","sidebar":"tutorialSidebar"},"basics/index":{"id":"basics/index","title":"Basics","description":"Documentation and tutorials for basic use cases.","sidebar":"tutorialSidebar"},"basics/jobs":{"id":"basics/jobs","title":"WASM In Jobs","description":"The wrapper code which Wasmbox automatically generates is designed to work within the Unity Job safety system. A wrapper requires write access for every operation, so it can only be used within one single job.","sidebar":"tutorialSidebar"},"basics/languages/assemblyscript":{"id":"basics/languages/assemblyscript","title":"AssemblyScript","description":"AssemblyScript is a typescript-like language designed for compiling to WebAssembly.","sidebar":"tutorialSidebar"},"basics/languages/cplusplus":{"id":"basics/languages/cplusplus","title":"C/C++","description":"C and C++ are two of the most well known and widely used languages in the world.","sidebar":"tutorialSidebar"},"basics/languages/index":{"id":"basics/languages/index","title":"Compiling To WASM","description":"There are many languages that compile to WASM and this section is not an exhaustive list of them! Each of these guides provides a brief overview of the language and links to resources for compiling that language to WASM.","sidebar":"tutorialSidebar"},"basics/languages/python":{"id":"basics/languages/python","title":"Python","description":"Python is one of the most widely used scripting languages in the world.","sidebar":"tutorialSidebar"},"basics/languages/rust":{"id":"basics/languages/rust","title":"Rust","description":"Rust is one of the best languages to use to compile to WASM. With full support for WASM & WASI easy to use, just by specifying a compiler flag. Much of the \\"crates\\" ecosystem can be compiled for WASM.","sidebar":"tutorialSidebar"},"basics/languages/wat":{"id":"basics/languages/wat","title":"Web Assembly Text","description":"Web Assembly Text (WAT) is a direct text representation of WASM code.","sidebar":"tutorialSidebar"},"basics/limiting_execution/epochinterruption":{"id":"basics/limiting_execution/epochinterruption","title":"Epoch Interruption","description":"When executing WASM code it is sometimes useful to set a limit on how long it can run for. This can be used to prevent potentially malicious or buggy code from running forever and slowing down your application. Wasmbox includes two mechanisms to do this, Epoch Interruption and Fuel Usage.","sidebar":"tutorialSidebar"},"basics/limiting_execution/fuelusage":{"id":"basics/limiting_execution/fuelusage","title":"Fuel Usage","description":"When executing WASM code it is sometimes useful to set a limit on how long it can run for. This can be used to prevent potentially malicious or buggy code from running forever and slowing down your application. Wasmbox includes two mechanisms to do this, Epoch Interruption and Fuel Usage.","sidebar":"tutorialSidebar"},"basics/limiting_execution/index":{"id":"basics/limiting_execution/index","title":"Limiting Execution Time","description":"When executing WASM code it is sometimes useful to set a limit on how long it can run for. This can be used to prevent malicious or buggy code from running forever and slowing down your application. Wasmbox includes two mechanisms to do this, Fuel Usage and Epoch Interruption.","sidebar":"tutorialSidebar"},"basics/linker":{"id":"basics/linker","title":"Calling C# Code From WASM","description":"Once a WASM module has been instantiated WASM code can be executed in a completely contained \\"sandbox\\" - the WASM code cannot interact with anything outside of the box. This is excellent for ensuring security and determinism, but it does significantly limit the capabilities of WASM code. The Linker allows C# methods to be exposed to the sandbox, allowing WASM code to call it directly.","sidebar":"tutorialSidebar"},"basics/using_wasm":{"id":"basics/using_wasm","title":"Using WASM In Scripts","description":"This tutorial will walk you through importing a WASM file into the editor and using the SimpleWasmMonoBehaviour to instantiate a WASM module in a script.","sidebar":"tutorialSidebar"},"basics/wasi/index":{"id":"basics/wasi/index","title":"WASI","description":"WASI, or WebAssembly System Interface, is an API specification that provides access to several operating-system-like features such as filesystems, clocks, and random numbers. Wasmbox provides implementations of most WASI functions (see Assets\\\\Plugins\\\\PlaceholderSoftware\\\\Wasmbox\\\\Core\\\\WASI\\\\).","sidebar":"tutorialSidebar"},"basics/wasi/virtual_file_system":{"id":"basics/wasi/virtual_file_system","title":"Virtual File System","description":"Certain WASI methods provide access to a POSIX-like filesystem API, which allows WASM code to read/write files and folders. Wasmbox provides a complete in-memory file system which can have \\"real\\" files and folders mapped into it, giving very fine grained control over WASM access to the file system.","sidebar":"tutorialSidebar"},"getting_started/demos/BasicMonoBehaviour":{"id":"getting_started/demos/BasicMonoBehaviour","title":"Basic MonoBehaviour","description":"This scene demonstrates the most basic usage of Wasmbox.","sidebar":"tutorialSidebar"},"getting_started/demos/index":{"id":"getting_started/demos/index","title":"Example Scenes","description":"Wasmbox example scenes are located in Assets/Plugins/PlaceholderSoftware/Wasmbox/Demos.","sidebar":"tutorialSidebar"},"getting_started/index":{"id":"getting_started/index","title":"Getting Started","description":"","sidebar":"tutorialSidebar"},"getting_started/installation":{"id":"getting_started/installation","title":"Installation","description":"Requirements","sidebar":"tutorialSidebar"},"getting_started/platforms":{"id":"getting_started/platforms","title":"Platform Support","description":"Wasmbox is built using the Wasmtime WebAssembly engine. Wasmbox supported platforms are derived from the Wasmtime supported platforms policy.","sidebar":"tutorialSidebar"},"getting_started/support":{"id":"getting_started/support","title":"Help & Support","description":"Documentation","sidebar":"tutorialSidebar"},"getting_started/wasmintro":{"id":"getting_started/wasmintro","title":"What Is WebAssembly?","description":"WebAssembly (WASM) is a new type of low-level binary format, like assembly language, designed to be run in a virtual machine. Languages such as C, C++ and Rust can be compiled directly to WebAssembly and run inside the sandbox, providing high performance, deterministic execution, portability across different platforms, and protection against malicious code.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Wasmbox","description":"Wasmbox is full WebAssembly runtime for Unity, based on Wasmtime. WebAssembly (WASM) makes it possible to execute compiled code (e.g. C, C++ or Rust) in a safe and secure sandbox - providing high performance, safe execution of potentially untrusted code, cross platform portability and deterministic execution.","sidebar":"tutorialSidebar"},"reference/code/codegeneration":{"id":"reference/code/codegeneration","title":"Generated Code","description":"When a .wasm or .wat file is imported the option Generate C# Wrapper Code can be enabled to automatically generate a C# script which \\"wraps\\" the WASM module. This wrapper code handles most of the \\"low level\\" details of interacting with an instantiated WASM module.","sidebar":"tutorialSidebar"},"reference/code/dynamicwasmasset":{"id":"reference/code/dynamicwasmasset","title":"Dynamic WASM Asset","description":"DynamicWasmAsset is an implementation of IWasmAsset which allows loading of arbitrary data as WASM/WAT code at runtime. Read more about runtime loading of WASM.","sidebar":"tutorialSidebar"},"reference/code/engineconfig":{"id":"reference/code/engineconfig","title":"Engine Config","description":"An Engine is used when a WASM Asset is loaded into a LoadedModule. The EngineConfig controls exactly how the asset is loaded and what features are compiled into the code.","sidebar":"tutorialSidebar"},"reference/code/iwasmasset":{"id":"reference/code/iwasmasset","title":"IWasmAsset","description":"IWasmAsset is an interface which represents a source which a Module can be loaded from. Built in implementations include WasmAsset (imported through the editor) and DynamicWasmAsset (loaded at runtime).","sidebar":"tutorialSidebar"},"reference/code/loadedmodule":{"id":"reference/code/loadedmodule","title":"Loaded Module","description":"A LoadedModule represents WASM Asset that has been loaded into memory and is ready to be used to create WASM instances.","sidebar":"tutorialSidebar"},"reference/code/simplewasmmonobehaviour":{"id":"reference/code/simplewasmmonobehaviour","title":"SimpleWasmMonoBehaviour","description":"SimpleWasmMonoBehaviour provides an easy to use system which can load a WASM module and execute code in it, all from within a standard MonoBehaviour. For more information see this tutorial.","sidebar":"tutorialSidebar"},"reference/code/WASI/clock":{"id":"reference/code/WASI/clock","title":"Clock","description":"These WASI methods provide access to the time.","sidebar":"tutorialSidebar"},"reference/code/WASI/environment":{"id":"reference/code/WASI/environment","title":"Environment","description":"These WASI methods virtualise an environment which the WASM code is executing within (environment variables and arguments).","sidebar":"tutorialSidebar"},"reference/code/WASI/filesystem":{"id":"reference/code/WASI/filesystem","title":"Virtual Filesystem","description":"These WASI methods provide access to the file system.","sidebar":"tutorialSidebar"},"reference/code/WASI/process":{"id":"reference/code/WASI/process","title":"Process","description":"These WASI methods virtualise a Windows/Linux style \\"process\\".","sidebar":"tutorialSidebar"},"reference/code/WASI/random":{"id":"reference/code/WASI/random","title":"Random","description":"The WASI random number generation interfaces allows WebAssembly code to generate random numbers.","sidebar":"tutorialSidebar"},"reference/code/wasmasset":{"id":"reference/code/wasmasset","title":"WASM Asset","description":"A WasmAsset is a WASM module which has been imported in the editor from a .wasm or .wat file and converted into a form ready to load at runtime. For WasmAsset editor/inspector documentation see here.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/engine":{"id":"reference/code/wasmtime/engine","title":"Engine","description":"An Engine is used to compile WASM code into native machine code ready for execution. The Engine class is a wrapper around the wasmtime::Engine struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/function":{"id":"reference/code/wasmtime/function","title":"Function","description":"A Function represents a callable piece of code. This may be a WASM function that can be called by C# code, or a C# function which can be called by WASM code. The Function class is a wrapper around the wasmtime::Func struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/global":{"id":"reference/code/wasmtime/global","title":"Global","description":"A Global represents a single named value with a specific type. All globals are readable, some globals are also writable.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/instance":{"id":"reference/code/wasmtime/instance","title":"Instance","description":"An Instance is an instantiation of a Module, which can be used to execute WASM code. The Instance class is a wrapper around the wasmtime::Instance struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/Introduction":{"id":"reference/code/wasmtime/Introduction","title":"Wasmtime Introduction","description":"Wasmtime is a fast and secure runtime for WebAssembly built by the Bytecode Alliance. Wasmbox uses the Wasmtime engine to compile and execute WASM. This is exposed through the wasmtime-dotnet library.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/linker":{"id":"reference/code/wasmtime/linker","title":"Linker","description":"A Linker provides a set of imports for instantiating a Module. The Linker class is a wrapper around the wasmtime::Linker struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/memory":{"id":"reference/code/wasmtime/memory","title":"Memory","description":"A Memory represents a contiguous array of bytes that WASM code can read and write. The Memory class is a wrapper around the wasmtime::Memory struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/module":{"id":"reference/code/wasmtime/module","title":"Module","description":"A Module represents WASM code that has been compiled by an Engine into executable machine code. The Module class is a wrapper around the wasmtime::Module struct. A Module declares a set of imports (things it requires) and exports (things it provides).","sidebar":"tutorialSidebar"},"reference/code/wasmtime/store":{"id":"reference/code/wasmtime/store","title":"Store","description":"A Store is the owner of all state in WASM. The Store class is a wrapper around the wasmtime::Store struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/table":{"id":"reference/code/wasmtime/table","title":"Table","description":"A Table represents a list references which cannot be stored as bytes in Memory for safety and portability reasons.. The Table class is a wrapper around the wasmtime::Table struct.","sidebar":"tutorialSidebar"},"reference/code/wasmtime/valuekind":{"id":"reference/code/wasmtime/valuekind","title":"ValueKind","description":"A ValueKind represents all of the possible types of a WebAssembly value. This is used to represent the type of various constructs such as Globals, or Function parameters/results.","sidebar":"tutorialSidebar"},"reference/editor/import":{"id":"reference/editor/import","title":"Importing WebAssembly","description":"Wasmbox includes an import pipeline for WASM assets which validates, initialises, optimises, precompiles and compresses the WASM. Any .wasm (binary WebAssembly) or .wat (text WebAssembly) files will automatically be processed and imported through this pipeline into a WasmAsset.","sidebar":"tutorialSidebar"},"reference/editor/wasmasset":{"id":"reference/editor/wasmasset","title":"WASM Asset","description":"A WasmAsset is a WASM module which has been imported from a .wasm or .wat file and converted into a form ready to load at runtime. For WasmAsset scripting documentation see here.","sidebar":"tutorialSidebar"},"reference/glossary":{"id":"reference/glossary","title":"Engines, Modules, Stores & Instances \ud83d\ude35","description":"There are several stages to go through in the process of taking a .wasm file and loading it into executable code. This document explains the stages and the various objects involved at a high level.","sidebar":"tutorialSidebar"},"reference/index":{"id":"reference/index","title":"Reference","description":"Reference documentation for Wasmbox.","sidebar":"tutorialSidebar"}}}')}}]);