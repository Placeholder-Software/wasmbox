"use strict";(self.webpackChunkwasmbox_docs=self.webpackChunkwasmbox_docs||[]).push([[7464],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7944:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={title:"Calling C# Code From WASM",sidebar_position:2},l=void 0,o={unversionedId:"basics/linker",id:"basics/linker",title:"Calling C# Code From WASM",description:'Once a WASM module has been instantiated WASM code can be executed in a completely contained "sandbox" - the WASM code cannot interact with anything outside of the box. This is excellent for ensuring security and determinism, but it does significantly limit the capabilities of WASM code. The Linker allows C# methods to be exposed to the sandbox, allowing WASM code to call it directly.',source:"@site/docs/basics/linker.md",sourceDirName:"basics",slug:"/basics/linker",permalink:"/wasmbox/basics/linker",draft:!1,editUrl:"https://github.com/Placeholder-Software/Wasmbox/tree/master/docs/basics/linker.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Calling C# Code From WASM",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Addressable Loading",permalink:"/wasmbox/basics/addressables"},next:{title:"WASI",permalink:"/wasmbox/basics/wasi/"}},s={},d=[{value:"Limitations",id:"limitations",level:2},{value:"Example",id:"example",level:2},{value:"Defining Functions",id:"defining-functions",level:3},{value:"Defining WASI Features",id:"defining-wasi-features",level:3},{value:"Defining An Instance",id:"defining-an-instance",level:3},{value:"Defining A Module",id:"defining-a-module",level:3},{value:"WASI",id:"wasi",level:2}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'Once a WASM module has been instantiated WASM code can be executed in a completely contained "sandbox" - the WASM code cannot interact with anything outside of the box. This is excellent for ensuring security and determinism, but it does significantly limit the capabilities of WASM code. The ',(0,i.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,i.kt)("inlineCode",{parentName:"a"},"Linker"))," allows C# methods to be exposed to the sandbox, allowing WASM code to call it directly."),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("p",null,"WASM supports a ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/valuekind"},"very limited set of types"),", functions defined in the ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,i.kt)("inlineCode",{parentName:"a"},"Linker"))," can only use these types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"WASM Type"),(0,i.kt)("th",{parentName:"tr",align:null},"C# Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"i32"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"i64"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"long"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"f32"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"float"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"f64"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"double"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"externref"),(0,i.kt)("td",{parentName:"tr",align:null},"Any ",(0,i.kt)("inlineCode",{parentName:"td"},"class"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"object"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"funcref"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Wasmtime.Function"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"v128"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Wasmtime.V128"))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To add things to a ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,i.kt)("inlineCode",{parentName:"a"},"Linker"))," simply ",(0,i.kt)("em",{parentName:"p"},"Define")," them. The simplest use case is directly adding a ",(0,i.kt)("a",{parentName:"p",href:"#add-a-function"},"C# function to call")," or adding a ",(0,i.kt)("a",{parentName:"p",href:"#define-a-wasi-feature"},"WASI feature"),". Alternatively complex systems can be assembled from multiple independent WASM modules by ",(0,i.kt)("a",{parentName:"p",href:"#add-another-instance"},"adding an Instance")," or ",(0,i.kt)("a",{parentName:"p",href:"#add-a-module"},"adding a Module"),"."),(0,i.kt)("h3",{id:"defining-functions"},"Defining Functions"),(0,i.kt)("p",null,"A C# function/method can be defined:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// Lambda function\nlinker.DefineFunction("module", "add", (int a, int b) => a + b);\n\n// Method\nlinker.DefineFunction("module", "sub", Subtract);\nstatic int Subtract(int a, int b)\n{\n    return a - b;\n}\n')),(0,i.kt)("h3",{id:"defining-wasi-features"},"Defining WASI Features"),(0,i.kt)("p",null,"A WASI feature (such as a random number generator) can be defined:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var rng = new CryptoRandomSource();\nlinker.Define(rng);\n")),(0,i.kt)("h3",{id:"defining-an-instance"},"Defining An Instance"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"Instance")," can be defined, to add all of it's ",(0,i.kt)("em",{parentName:"p"},"exports")," for other WASM code to call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'Instance instance;\nLinker linker;\nlinker.DefineInstance(store, "the_name", instance);\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is an advanced use case which requires manually loading and instantiating modules! ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/advanced/manual_loading"},"Read more"),".")),(0,i.kt)("h3",{id:"defining-a-module"},"Defining A Module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Module module;\nLinker linker;\nlinker.DefineModule(store, module);\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is an advanced use case which requires manually loading modules! ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/advanced/manual_loading"},"Read more"),".")),(0,i.kt)("h2",{id:"wasi"},"WASI"),(0,i.kt)("p",null,"WASI is the ",(0,i.kt)("strong",{parentName:"p"},"WebAssembly System Interface"),". WASI is an API specification that provides access to several operating-system-like features such as filesystems, clocks, and random numbers which can all be added to the ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/reference/code/wasmtime/linker"},(0,i.kt)("inlineCode",{parentName:"a"},"Linker"))," for WASM code to call directly. Read more about using WASI ",(0,i.kt)("a",{parentName:"p",href:"/wasmbox/basics/wasi/"},(0,i.kt)("strong",{parentName:"a"},"here")),"."))}m.isMDXComponent=!0}}]);